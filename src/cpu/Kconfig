if ARCH_X86

source src/cpu/amd/Kconfig
source src/cpu/intel/Kconfig
source src/cpu/via/Kconfig
source src/cpu/x86/Kconfig

config CACHE_AS_RAM
	bool
	default !ROMCC

config DCACHE_RAM_BASE
	hex

config DCACHE_RAM_SIZE
	hex

config DCACHE_RAM_GLOBAL_VAR_SIZE
	hex
	default 0x0

# FIXME MAX_PHYSICAL_CPUS should move to AMD specific code, or better
# yet be dropped completely.
config MAX_PHYSICAL_CPUS
	int
	depends on CPU_AMD_MODEL_10XXX || CPU_AMD_MODEL_FXX || CPU_AMD_AGESA
	default 1

config SMP
	bool
	default y if MAX_CPUS != 1
	default n
	help
	  This option is used to enable certain functions to make coreboot
	  work correctly on symmetric multi processor (SMP) systems.

config AP_SIPI_VECTOR
	hex
	default 0xfffff000
	help
	  This must equal address of ap_sipi_vector from bootblock build.

config	MMX
	bool
	help
	  Select MMX in your socket or model Kconfig if your CPU has MMX
	  streaming SIMD instructions. ROMCC can build more efficient
	  code if it can spill to MMX registers.

config SSE
	bool
	help
	  Select SSE in your socket or model Kconfig if your CPU has SSE
	  streaming SIMD instructions. ROMCC can build more efficient
	  code if it can spill to SSE (aka XMM) registers.

config SSE2
	bool
	default n
	help
	  Select SSE2 in your socket or model Kconfig if your CPU has SSE2
	  streaming SIMD instructions. Some parts of coreboot can be built
	  with more efficient code if SSE2 instructions are available.

config MICROCODE_IN_CBFS
	bool "Look for microcode in CBFS"
	default n
	help
	  Load microcode updates from CBFS instead of compiling them in.

endif # ARCH_X86

config CPU_MICROCODE_FROM_CBFS
	bool
	default n

choice
	prompt "Include CPU microcode in CBFS"
	default CPU_MICROCODE_CBFS_NONE
	depends on EXPERT && CPU_MICROCODE_FROM_CBFS

config CPU_MICROCODE_CBFS_GENERATE
	depends on CPU_MICROCODE_FROM_CBFS
	bool "Generate from tree"
	help
	  Select this option if you want microcode updates to be assembled when
	  building coreboot and included in the final image as a separate CBFS
	  file. Microcode will not be hard-coded into ramstage, and may be
	  removed from the ROM image at a later time with cbfstool.

config CPU_MICROCODE_CBFS_EXTERNAL
	depends on CPU_MICROCODE_FROM_CBFS
	bool "Include external microcode file"
	help
	  Select this option if you want to include an external file containing
	  the CPU microcode. This will be included as a separate file in CBFS.
	  This option is only available for CPUs where loading microcode from
	  CBFS is implemented.

config CPU_MICROCODE_CBFS_NONE
	bool "None"
	help
	  Select this option if you do not want CPU microcode included in CBFS.
	  Note that for some CPUs, the microcode is hard-coded into the source
	  tree and is not loaded from CBFS. In this case, microcode will still
	  be updated.

endchoice

config CPU_MICROCODE_FILE
	string "Path and filename of CPU microcode"
	depends on CPU_MICROCODE_CBFS_EXTERNAL
	default "microcode.bin"
	help
	  The path and filename of the file containing the CPU microcode.


# The following option lets us know that the CPU initialization code will check
# for UPDATE_CPU_MICROCODE, and will not include any microcode updates in the
# image if it detects this option.
# This must only be selected by CPUs whose microcode update has been adjusted
# to respect UPDATE_CPU_MICROCODE option.
config RESPECTS_UPDATE_CPU_MICROCODE_OPTION
	bool
	default n

config UPDATE_CPU_MICROCODE
	bool "Update CPU microcode"
	default y
	depends on EXPERT && RESPECTS_UPDATE_CPU_MICROCODE_OPTION
	help
	  Select this to apply patches to the CPU microcode provided by the
	  vendor (without source), and distributed with coreboot, to address
	  issues in the CPU post production.

	  Microcode updates distributed with coreboot are not necessarily the
	  latest version available. Updates are only applied if they are newer
	  than the microcode already in the CPU.

	  Unselect this to let CPUs run with microcode as shipped from factory.
	  No binary microcode patches will be included in the coreboot image in
	  that case, which can help with creating an image for which complete
	  source code is available, which in turn might simplify license
	  compliance.

	  Microcode updates intend to solve issues that have been discovered
	  after CPU production. The common case is that systems work as intended
	  with updated microcode, but we have also seen cases where issues were
	  solved by not applying the microcode updates.

	  Note that some operating system include these same microcode patches,
	  so you may need to also disable microcode updates in your operating
	  system in order for this option to matter.
