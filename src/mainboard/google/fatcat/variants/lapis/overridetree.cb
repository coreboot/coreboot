fw_config
	field WIFI 2 3
		option WIFI_CNVI_7		0
		option WIFI_CNVI_7E		1
	end
	field TOUCHSCREEN 4 5
		option NONE_TOUCH	0
		option 14_TOUCH		1
	end
	field TOUCHPAD 6 7
		option TOUCHPAD_UNKNOWN		0
		option TOUCHPAD_LPSS_I2C	1
		option TOUCHPAD_THC_I2C		2
	end
	field STORAGE 8 9
		option STORAGE_UNKNOWN		0
		option STORAGE_NVME_GEN4	1
		option STORAGE_NVME_GEN5	2
		option STORAGE_UFS		3
	end
	field KB 10 11
		option KB_UNKNOWN	0
		option KB_BL		1
	end
	field UFC 12 13
		option UFC_UNKNOWN	0
		option UFC_1080P	1
	end
	field FP 14 15
		option FP_ABSENT	0
		option FP_PRESENT	1
	end
	field STYLUS 16 16
		option STYLUS_ABSENT	0
		option STYLUS_PRESENT	1
	end
end

chip soc/intel/pantherlake

	register "power_limits_config[PTL_CORE_1]" = "{
		.tdp_pl1_override = 15,
		.tdp_pl2_override = 25,
	}"

	register "power_limits_config[PTL_CORE_3]" = "{
		.tdp_pl1_override = 25,
		.tdp_pl2_override = 25,
	}"

	register "power_limits_config[PTL_CORE_4]" = "{
		.tdp_pl1_override = 25,
		.tdp_pl2_override = 25,
	}"

	register "usb2_ports[0]" = "USB2_PORT_TYPE_C(OC_SKIP)" # USB2_C0
	register "usb2_ports[1]" = "USB2_PORT_TYPE_C(OC_SKIP)" # USB2_C1
	register "usb2_ports[2]" = "USB2_PORT_MID(OC_SKIP)" # LED
	register "usb2_ports[3]" = "USB2_PORT_MID(OC_SKIP)" # Type-A Port A0 (MB)
	register "usb2_ports[4]" = "USB2_PORT_MID(OC_SKIP)" # Type-A Port A1 (DB)
	register "usb2_ports[5]" = "USB2_PORT_MID(OC_SKIP)" # USB HUB (USB2 Camera)
	register "usb2_ports[6]" = "USB2_PORT_MID(OC_SKIP)" # Fingerprint
	register "usb2_ports[7]" = "USB2_PORT_MID(OC_SKIP)" # Discrete Bluetooth

	register "usb3_ports[0]" = "USB3_PORT_DEFAULT(OC_SKIP)" # USB3.2 x1 Type-A Con #1 (MB)/
	register "usb3_ports[1]" = "USB3_PORT_DEFAULT(OC_SKIP)" # USB3.2 x1 Type-A Con #2 (DB)/

	register "tcss_ports[0]" = "TCSS_PORT_DEFAULT(OC_SKIP)"
	register "tcss_ports[2]" = "TCSS_PORT_DEFAULT(OC_SKIP)"

	register "tcss_cap_policy[0]" = "TCSS_TYPE_C_PORT_FULL_FUN"
	register "tcss_cap_policy[2]" = "TCSS_TYPE_C_PORT_FULL_FUN"

	# Enable EDP in PortA
	register "ddi_port_A_config" = "1"
	register "ddi_ports_config" = "{
			[DDI_PORT_A] = DDI_ENABLE_HPD,
	}"

	# Enable CNVi Wi-Fi and Bluetooth
	register "cnvi_wifi_core" = "true"
	register "cnvi_bt_core" = "true"

	register "serial_io_i2c_mode" = "{
		[PchSerialIoIndexI2C0]  = PchSerialIoPci,
		[PchSerialIoIndexI2C3]  = PchSerialIoPci,
	}"

	# Intel Common SoC Config
	#+-------------------+---------------------------+
	#| Field             |  Value                    |
	#+-------------------+---------------------------+
	#| I2C3              | cr50 TPM.                 |
	#+-------------------+---------------------------+
	register "common_soc_config" = "{
		.logo_valignment = FW_SPLASH_VALIGNMENT_MIDDLE,
		.i2c[3] = {
			.early_init=1,
			.speed = I2C_SPEED_FAST,
		},
	}"

	device domain 0 on
		device ref dtt on
			chip drivers/intel/dptf
				## sensor information
				register "options.tsr[0].desc" = ""VR""
				register "options.tsr[1].desc" = ""DDR""
				register "options.tsr[2].desc" = ""Top""
				register "options.tsr[3].desc" = ""SSD""
				register "options.tsr[4].desc" = ""Charger""

				## Active Policy
				# FIXME: below values are initial reference values only
				register "policies.active" = "{
						[0] = {
							.target = DPTF_TEMP_SENSOR_0,
							.thresholds = {
									TEMP_PCT(70, 97),
									TEMP_PCT(65, 90),
									TEMP_PCT(60, 80),
									TEMP_PCT(55, 75),
									TEMP_PCT(50, 65),
									TEMP_PCT(45, 45),
									TEMP_PCT(43, 30),
								}
							},
						[1] = {
							.target = DPTF_TEMP_SENSOR_1,
							.thresholds = {
									TEMP_PCT(70, 97),
									TEMP_PCT(65, 90),
									TEMP_PCT(60, 80),
									TEMP_PCT(55, 75),
									TEMP_PCT(50, 65),
									TEMP_PCT(45, 45),
									TEMP_PCT(43, 30),
								}
							},
						[2] = {
							.target = DPTF_TEMP_SENSOR_2,
							.thresholds = {
									TEMP_PCT(75, 90),
									TEMP_PCT(70, 80),
									TEMP_PCT(65, 70),
									TEMP_PCT(60, 50),
								}
							},
						[3] = {
							.target = DPTF_TEMP_SENSOR_3,
							.thresholds = {
									TEMP_PCT(75, 90),
									TEMP_PCT(70, 80),
									TEMP_PCT(65, 70),
									TEMP_PCT(60, 60),
									TEMP_PCT(55, 50),
									TEMP_PCT(50, 40),
									TEMP_PCT(45, 30),
								}
							},
						[4] = {
							.target = DPTF_TEMP_SENSOR_4,
							.thresholds = {
									TEMP_PCT(75, 90),
									TEMP_PCT(70, 80),
									TEMP_PCT(65, 70),
									TEMP_PCT(60, 60),
									TEMP_PCT(55, 50),
									TEMP_PCT(50, 40),
									TEMP_PCT(45, 30),
								}
							}
				}"

				## Passive Policy
				# TODO: below values are initial reference values only
				register "policies.passive" = "{
						[0] = DPTF_PASSIVE(CPU,         CPU,           95, 5000),
						[1] = DPTF_PASSIVE(CPU,         TEMP_SENSOR_0, 80, 5000),
						[2] = DPTF_PASSIVE(CPU,         TEMP_SENSOR_1, 80, 5000),
						[3] = DPTF_PASSIVE(CHARGER,     TEMP_SENSOR_2, 75, 5000),
						[4] = DPTF_PASSIVE(CPU,         TEMP_SENSOR_3, 80, 5000),
						[5] = DPTF_PASSIVE(CPU,         TEMP_SENSOR_4, 80, 5000),
				}"

				## Critical Policy
				# TODO: below values are initial reference values only
				register "policies.critical" = "{
						[0] = DPTF_CRITICAL(CPU,          105, SHUTDOWN),
						[1] = DPTF_CRITICAL(TEMP_SENSOR_0, 91, SHUTDOWN),
						[2] = DPTF_CRITICAL(TEMP_SENSOR_1, 91, SHUTDOWN),
						[3] = DPTF_CRITICAL(TEMP_SENSOR_2, 91, SHUTDOWN),
						[4] = DPTF_CRITICAL(TEMP_SENSOR_3, 91, SHUTDOWN),
						[5] = DPTF_CRITICAL(TEMP_SENSOR_4, 91, SHUTDOWN),
				}"

				## Power Limits Control
				register "controls.power_limits" = "{
						.pl1 = {
							.min_power = 25000,
							.max_power = 25000,
							.time_window_min = 28 * MSECS_PER_SEC,
							.time_window_max = 32 * MSECS_PER_SEC,
							.granularity = 200,
						},
						.pl2 = {
							.min_power = 95000,
							.max_power = 95000,
							.time_window_min = 28 * MSECS_PER_SEC,
							.time_window_max = 32 * MSECS_PER_SEC,
							.granularity = 1000,
						}
				}"

				## Charger Performance Control (Control, mA)
				register "controls.charger_perf" = "{
						[0] = { 255, 3000 },
						[1] = {  24, 1500 },
						[2] = {  16, 1000 },
						[3] = {   8,  500 }
				}"

				## Fan Performance Control (Percent, Speed, Noise, Power)
				register "controls.fan_perf" = "{
						[0] = {  90, 6700, 220, 2200, },
						[1] = {  80, 5800, 180, 1800, },
						[2] = {  70, 5000, 145, 1450, },
						[3] = {  60, 4900, 115, 1150, },
						[4] = {  50, 3838,  90,  900, },
						[5] = {  40, 2904,  55,  550, },
						[6] = {  30, 2337,  30,  300, },
						[7] = {  20, 1608,  15,  150, },
						[8] = {  10,  800,  10,  100, },
						[9] = {   0,    0,   0,   50, }
				}"

				## Fan options
				register "options.fan.fine_grained_control" = "true"
				register "options.fan.step_size" = "2"

				device generic 0 alias dptf_policy on end
			end
		end
		device ref igpu on
			chip drivers/gfx/generic
				register "device_count" = "4"
				# DDIA for eDP
				register "device[0].name" = ""LCD0""
				register "device[0].type" = "panel"
				# DDIB for HDMI
				# If HDMI is not enumerated in the kernel, then no GFX device should be added for DDIB
				register "device[1].name" = ""DD01""
				# TCP0 (DP-1) for port C0
				register "device[2].name" = ""DD02""
				register "device[2].use_pld" = "true"
				register "device[2].pld" = "ACPI_PLD_TYPE_C(LEFT, LEFT, ACPI_PLD_GROUP(2, 1))"
				# TCP1 (DP-2) for port C1
				register "device[3].name" = ""DD03""
				register "device[3].use_pld" = "true"
				register "device[3].pld" = "ACPI_PLD_TYPE_C(LEFT, RIGHT, ACPI_PLD_GROUP(1, 1))"
				device generic 0 on end
			end
		end
		device ref ipu on end
		device ref iaa off end
		device ref tbt_pcie_rp0 on end
		device ref tbt_pcie_rp2 on end
		device ref tcss_xhci on
			chip drivers/usb/acpi
				device ref tcss_root_hub on
					chip drivers/usb/acpi
						register "desc" = ""USB3 Type-C Port C1""
						register "type" = "UPC_TYPE_C_USB2_SS_SWITCH"
						register "group" = "ACPI_PLD_GROUP(1, 2)"
						device ref tcss_usb3_port0 on end
					end
					chip drivers/usb/acpi
						register "desc" = ""USB3 Type-C Port C0""
						register "type" = "UPC_TYPE_C_USB2_SS_SWITCH"
						register "group" = "ACPI_PLD_GROUP(2, 2)"
						device ref tcss_usb3_port2 on end
					end
				end
			end
		end

		device ref tcss_dma0 on
			chip drivers/intel/usb4/retimer
				register "dfp[0].power_gpio" = "ACPI_GPIO_OUTPUT_ACTIVE_HIGH(GPP_B21)"
				use tcss_usb3_port0 as dfp[0].typec_port
				device generic 0 on end
			end
		end
		device ref tcss_dma1 on
			chip drivers/intel/usb4/retimer
				register "dfp[0].power_gpio" = "ACPI_GPIO_OUTPUT_ACTIVE_HIGH(GPP_B21)"
				use tcss_usb3_port2 as dfp[0].typec_port
				device generic 0 on end
			end
		end

		device ref xhci on
			chip drivers/usb/acpi
				device ref xhci_root_hub on
					chip drivers/usb/acpi
						register "desc" = ""USB2 Type-C Port C1""
						register "type" = "UPC_TYPE_C_USB2_SS_SWITCH"
						register "group" = "ACPI_PLD_GROUP(1, 1)"
						device ref usb2_port1 on end
					end
					chip drivers/usb/acpi
						register "desc" = ""USB2 Type-C Port C0""
						register "type" = "UPC_TYPE_C_USB2_SS_SWITCH"
						register "group" = "ACPI_PLD_GROUP(2, 1)"
						device ref usb2_port2 on end
					end
					chip drivers/usb/acpi
						register "desc" = ""USB2 LED""
						register "type" = "UPC_TYPE_INTERNAL"
						register "group" = "ACPI_PLD_GROUP(3, 1)"
						device ref usb2_port3 on end
					end
					chip drivers/usb/acpi
						register "desc" = ""USB2 Type-A Port 0""
						register "type" = "UPC_TYPE_A"
						register "group" = "ACPI_PLD_GROUP(4, 1)"
						device ref usb2_port4 on end
					end
					chip drivers/usb/acpi
						register "desc" = ""USB2 Type-A Port 1""
						register "type" = "UPC_TYPE_A"
						register "group" = "ACPI_PLD_GROUP(5, 1)"
						device ref usb2_port5 on end
					end
					chip drivers/usb/acpi
						register "desc" = ""User Facing Camera""
						register "type" = "UPC_TYPE_INTERNAL"
						register "has_power_resource" = "true"
						register "enable_gpio" = "ACPI_GPIO_OUTPUT_ACTIVE_HIGH(GPP_C06)"
						register "enable_delay_ms" = "20"
						device ref usb2_port6 on end
					end
					chip drivers/usb/acpi
						register "desc" = ""USB2 Fingerprint""
						register "type" = "UPC_TYPE_INTERNAL"
						register "group" = "ACPI_PLD_GROUP(7, 1)"
						device ref usb2_port7 on end
					end
					chip drivers/usb/acpi
						register "desc" = ""USB2 Bluetooth""
						register "type" = "UPC_TYPE_INTERNAL"
						register "reset_gpio" = "ACPI_GPIO_OUTPUT_ACTIVE_LOW(GPP_A16)"
						device ref usb2_port8 on end
					end
					chip drivers/usb/acpi
						register "desc" = ""USB3 Type-A Port 0""
						register "type" = "UPC_TYPE_USB3_A"
						register "group" = "ACPI_PLD_GROUP(4, 2)"
						device ref usb3_port1 on end
					end
					chip drivers/usb/acpi
						register "desc" = ""USB3 Type-A Port 1""
						register "type" = "UPC_TYPE_USB3_A"
						register "group" = "ACPI_PLD_GROUP(5, 2)"
						device ref usb3_port2 on end
					end
				end
			end
		end

		device ref pcie_rp9 on
			probe STORAGE STORAGE_UNKNOWN
			probe STORAGE STORAGE_NVME_GEN4
			register "pcie_rp[PCIE_RP(9)]" = "{
			.clk_src = 0,
			.clk_req = 0,
			.flags = PCIE_RP_CLK_REQ_DETECT | PCIE_RP_LTR | PCIE_RP_AER,
			}"
			chip soc/intel/common/block/pcie/rtd3
				register "is_storage" = "true"
				register "srcclk_pin" = "0"
				device generic 0 on end
			end
		end # Gen4 SSD

		device ref cnvi_wifi on
			probe WIFI WIFI_CNVI_7
			probe WIFI WIFI_CNVI_7E
			chip drivers/wifi/generic
				register "wake" = "GPE0_PME_B0"
				register "add_acpi_dma_property" = "true"
				register "enable_cnvi_ddr_rfim" = "true"
				use cnvi_bluetooth as bluetooth_companion
				device generic 0 on end
			end
		end # CNVi

		device ref cnvi_bluetooth on
			probe WIFI WIFI_CNVI_7
			probe WIFI WIFI_CNVI_7E
			chip soc/intel/common/block/cnvi
				register "wake" = "GPE0_PME_B0"
				device generic 0 on end
			end
		end

		device ref thc0 on
			register "thc_wake_on_touch[0]" = "true"
			register "thc_mode[0]" = "THC_HID_I2C_MODE"
			# THC0 is function 0; hence it needs to be enabled when THC1 is to be enabled.
			chip drivers/intel/touch
				register "name" = "INTEL_THC0_NAME"
				register "mode" = "THC_HID_I2C_MODE"
				register "dev_hidi2c.intf.hidi2c.addr" = "0x15"
				register "dev_hidi2c.intf.hidi2c.descriptor_address" = "0x01"
				register "wake_on_touch" = "true"
				# NOTE: Use GpioInt() in _CRS and does not use GPE.
				register "wake_gpio" = "ACPI_GPIO_IRQ_LEVEL_LOW_WAKE(GPP_VGPIO3_THC0)"
				register "active_ltr" = "1"
				register "idle_ltr" = "0"
				register "connected_device" = "TH_SENSOR_GENERIC"
				register "add_acpi_dma_property" = "true"
				device generic 0 on end
			end
		end #Touchpad
		device ref thc1 on
			register "thc_wake_on_touch[1]" = "true"
			register "thc_mode[1]" = "THC_HID_I2C_MODE"
			chip drivers/intel/touch
				register "name" = "INTEL_THC1_NAME"
				register "mode" = "THC_HID_I2C_MODE"
				register "dev_hidi2c.hid" = ""RAYD0001""
				register "dev_hidi2c.cid" = ""PNP0C50""
				register "dev_hidi2c.intf.hidi2c.addr" = "0x39"
				register "dev_hidi2c.intf.hidi2c.descriptor_address" = "0"
				register "enable_gpio" = "ACPI_GPIO_OUTPUT_ACTIVE_HIGH(GPP_F08)"
				register "wake_on_touch" = "true"
				# NOTE: Use GpioInt() in _CRS and does not use GPE.
				register "wake_gpio" = "ACPI_GPIO_IRQ_LEVEL_LOW_WAKE(GPP_VGPIO3_THC1)"
				register "active_ltr" = "1"
				register "idle_ltr" = "0"
				register "connected_device" = "TH_SENSOR_GENERIC"
				register "add_acpi_dma_property" = "true"
				device generic 0 on end
			end
		end #Touchpenal

		device ref hda on
			chip drivers/intel/soundwire
				device generic 0 on
					chip drivers/soundwire/cs42l43
						# SoundWire Link 3 ID 0
						register "desc" = ""Headset Codec""
						register "sub" = ""1337""
						device generic 3.0 on end
					end
					chip drivers/soundwire/cs35l56
						# SoundWire Link 2 ID 0
						register "desc" = ""Left Speaker Amp""
						register "part_id" = "MIPI_DEV_ID_CIRRUS_CS35L56"
						register "sub" = ""12345678""
						device generic 2.0 on end
					end
					chip drivers/soundwire/cs35l56
						# SoundWire Link 2 ID 1
						register "desc" = ""Right Speaker Amp""
						register "part_id" = "MIPI_DEV_ID_CIRRUS_CS35L56"
						register "sub" = ""12345678""
						device generic 2.1 on end
					end
				end
			end
		end # SNDW
		device ref i2c0 on end
		device ref i2c3 on
			chip drivers/i2c/tpm
				register "hid" = ""GOOG0005""
				register "irq" = "ACPI_IRQ_EDGE_LOW(GPP_E02_IRQ)"
				device i2c 50 on end
			end
		end # I2C3
	end
end
